{"version":3,"file":"index-prod.umd.js","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../node_modules/memoize-one/dist/memoize-one.esm.js","../src/timer.js","../src/domHelpers.js","../src/createListComponent.js","../src/ItemMeasurer.js","../src/DynamicSizeList.js","../src/createGridComponent.js","../src/FixedSizeGrid.js","../src/FixedSizeList.js","../src/VariableSizeGrid.js","../src/VariableSizeList.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../src/shallowDiffers.js","../src/areEqual.js","../src/shouldComponentUpdate.js"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","function areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (newInputs[i] !== lastInputs[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var lastThis;\n    var lastArgs = [];\n    var lastResult;\n    var calledOnce = false;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n            return lastResult;\n        }\n        lastResult = resultFn.apply(this, newArgs);\n        calledOnce = true;\n        lastThis = this;\n        lastArgs = newArgs;\n        return lastResult;\n    }\n    return memoized;\n}\n\nexport default memoizeOne;\n","// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\nexport type Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\nexport type Layout = 'horizontal' | 'vertical';\n\nexport type RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => ?number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nexport const defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n      this._commitHook();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n      this._commitHook();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._unmountHook();\n    }\n\n    render() {\n      const {\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const items = this._renderItems();\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            height,\n            width,\n            overflow: 'auto',\n            position: 'relative',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // This method is called after mount and update.\n    // List implementations can override this method to be notified.\n    _commitHook() {}\n\n    // This method is called before unmounting.\n    // List implementations can override this method to be notified.\n    _unmountHook() {}\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          [direction === 'rtl' ? 'right' : 'left']: isHorizontal ? offset : 0,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _itemStyleCache: ItemStyleCache;\n\n    // TODO This memoized getter doesn't make much sense.\n    // If all that's really needed is for the impl to be able to reset the cache,\n    // Then we could expose a better API for that.\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => {\n      this._itemStyleCache = {};\n\n      return this._itemStyleCache;\n    });\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _renderItems() {\n      const {\n        children,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        useIsScrolling,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n      return items;\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          // eslint-disable-next-line default-case\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n\n    // Intentionally placed after all other instance properties have been initialized,\n    // So that DynamicSizeList can override the render behavior.\n    _instanceProps: any = initInstanceProps(this.props, this);\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport { cloneElement, Component } from 'react';\nimport { findDOMNode } from 'react-dom';\n\nimport type { Direction, Layout } from './createListComponent';\nimport type { HandleNewMeasurements } from './DynamicSizeList';\n\nclass DOMRectReadOnly {\n  +x: number;\n  +y: number;\n  +width: number;\n  +height: number;\n  +top: number;\n  +right: number;\n  +bottom: number;\n  +left: number;\n}\n\nclass ResizeObserverEntry {\n  +target: HTMLElement;\n  +contentRect: DOMRectReadOnly;\n}\n\ntype Entries = $ReadOnlyArray<ResizeObserverEntry>;\n\ntype ResizeObserverCallback = {\n  // eslint-disable-next-line no-use-before-define\n  (entries: Entries, observer: ResizeObserver): void,\n};\n\ndeclare class ResizeObserver {\n  constructor(ResizeObserverCallback): ResizeObserver;\n  observe(target: HTMLElement): void;\n  unobserve(target: HTMLElement): void;\n  disconnect(): void;\n}\n\ntype ItemMeasurerProps = {|\n  direction: Direction,\n  layout: Layout,\n  handleNewMeasurements: HandleNewMeasurements,\n  index: number,\n  item: React$Element<any>,\n  size: number,\n|};\n\nlet findDOMNodeWarningsSet = ((null: any): Set<any>);\nif (process.env.NODE_ENV !== 'production') {\n  findDOMNodeWarningsSet = new Set();\n}\n\nexport default class ItemMeasurer extends Component<ItemMeasurerProps, void> {\n  _didProvideValidRef: boolean = false;\n  _node: HTMLElement | null = null;\n  _resizeObserver: ResizeObserver | null = null;\n\n  componentDidMount() {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!this._didProvideValidRef) {\n        const { item } = this.props;\n\n        const displayName =\n          item && item.type\n            ? item.type.displayName || item.type.name || '(unknown)'\n            : '(unknown)';\n\n        if (!findDOMNodeWarningsSet.has(displayName)) {\n          findDOMNodeWarningsSet.add(displayName);\n\n          console.warn(\n            'DynamicSizeList item renderers should attach a ref to the topmost HTMLElement they render. ' +\n              `The item renderer \"${displayName}\" did not attach a ref to a valid HTMLElement. ` +\n              'findDOMNode() will be used as a fallback, but is slower and more error prone than using a ref.\\n\\n' +\n              'Learn more about ref forwarding: ' +\n              'https://reactjs.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components'\n          );\n        }\n      }\n    }\n\n    // Force sync measure for the initial mount.\n    // This is necessary to support the DynamicSizeList layout logic.\n    this._measureItem(true, true);\n\n    if (typeof ResizeObserver !== 'undefined') {\n      // Watch for resizes due to changed content,\n      // Or changes in the size of the parent container.\n      this._resizeObserver = new ResizeObserver(this._onResize);\n      if (this._node !== null) {\n        this._resizeObserver.observe(this._node);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._resizeObserver !== null) {\n      this._resizeObserver.disconnect();\n      this._resizeObserver = null;\n    }\n  }\n\n  render() {\n    return cloneElement(this.props.item, {\n      ref: this._refSetter,\n    });\n  }\n\n  _measureItem = (isCommitPhase: boolean, isMount: boolean) => {\n    const {\n      direction,\n      layout,\n      handleNewMeasurements,\n      index,\n      size: oldSize,\n    } = this.props;\n\n    const node = this._node;\n\n    if (\n      node &&\n      node.ownerDocument &&\n      node.ownerDocument.defaultView &&\n      node instanceof node.ownerDocument.defaultView.HTMLElement\n    ) {\n      const newSize =\n        direction === 'horizontal' || layout === 'horizontal'\n          ? Math.ceil(node.offsetWidth)\n          : Math.ceil(node.offsetHeight);\n\n      if (oldSize !== newSize || isMount) {\n        handleNewMeasurements(index, newSize, isCommitPhase);\n      }\n    }\n  };\n\n  _refSetter = (ref: any) => {\n    if (this._resizeObserver !== null && this._node !== null) {\n      this._resizeObserver.unobserve(this._node);\n    }\n\n    if (ref instanceof HTMLElement) {\n      this._didProvideValidRef = true;\n      this._node = ref;\n    } else if (ref) {\n      this._node = ((findDOMNode(ref): any): HTMLElement);\n    } else {\n      this._node = null;\n    }\n\n    if (this._resizeObserver !== null && this._node !== null) {\n      this._resizeObserver.observe(this._node);\n    }\n  };\n\n  _onResize = () => {\n    this._measureItem(false, false);\n  };\n}\n","// @flow\n\nimport { createElement } from 'react';\n\nimport createListComponent, { defaultItemKey } from './createListComponent';\nimport ItemMeasurer from './ItemMeasurer';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype DynanmicProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\nexport type HandleNewMeasurements = (\n  index: number,\n  newSize: number,\n  isFirstMeasureAfterMounting: boolean\n) => void;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  estimatedItemSize: number,\n  instance: any,\n  itemOffsetMap: { [index: number]: number },\n  itemSizeMap: { [index: number]: number },\n  lastMeasuredIndex: number,\n  lastPositionedIndex: number,\n  totalMeasuredSize: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const {\n    estimatedItemSize,\n    instance,\n    itemOffsetMap,\n    itemSizeMap,\n    lastMeasuredIndex,\n    lastPositionedIndex,\n  } = instanceProps;\n\n  // If the specified item has not yet been measured,\n  // Just return an estimated size for now.\n  if (index > lastMeasuredIndex) {\n    return {\n      offset: 0,\n      size: estimatedItemSize,\n    };\n  }\n\n  // Lazily update positions if they are stale.\n  if (index > lastPositionedIndex) {\n    if (lastPositionedIndex < 0) {\n      itemOffsetMap[0] = 0;\n    }\n\n    for (let i = Math.max(1, lastPositionedIndex + 1); i <= index; i++) {\n      const prevOffset = itemOffsetMap[i - 1];\n\n      // In some browsers (e.g. Firefox) fast scrolling may skip rows.\n      // In this case, our assumptions about last measured indices may be incorrect.\n      // Handle this edge case to prevent NaN values from breaking styles.\n      // Slow scrolling back over these skipped rows will adjust their sizes.\n      const prevSize = itemSizeMap[i - 1] || 0;\n\n      itemOffsetMap[i] = prevOffset + prevSize;\n\n      // Reset cached style to clear stale position.\n      delete instance._itemStyleCache[i];\n    }\n\n    instanceProps.lastPositionedIndex = index;\n  }\n\n  let offset = itemOffsetMap[index];\n  let size = itemSizeMap[index];\n\n  return { offset, size };\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  {\n    itemSizeMap,\n    estimatedItemSize,\n    lastMeasuredIndex,\n    totalMeasuredSize,\n  }: InstanceProps\n) => {\n  const simpleEstimatedTotalSize = itemCount * estimatedItemSize;\n  const newEstimatedTotalSize =\n    totalMeasuredSize + (itemCount - lastMeasuredIndex - 1) * estimatedItemSize;\n\n  if (newEstimatedTotalSize < 0) {\n    return simpleEstimatedTotalSize;\n  } else {\n    return newEstimatedTotalSize;\n  }\n};\n\nconst DynamicSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): ?number => {\n    // Do not hard-code item dimensions.\n    // We don't know them initially.\n    // Even once we do, changes in item content or list size should reflow.\n    return undefined;\n  },\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, layout, height, width } = props;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const { lastMeasuredIndex } = instanceProps;\n      if (index > lastMeasuredIndex) {\n        console.warn(\n          `DynamicSizeList does not support scrolling to items that yave not yet measured. ` +\n            `scrollToItem() was called with index ${index} but the last measured item was ${lastMeasuredIndex}.`\n        );\n      }\n    }\n\n    const size = (((direction === 'horizontal' || layout === 'horizontal'\n      ? width\n      : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.min(estimatedTotalSize - size, itemMetadata.offset);\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size\n    );\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset - minOffset < maxOffset - scrollOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { lastMeasuredIndex, totalMeasuredSize } = instanceProps;\n\n    // If we've already positioned and measured past this point,\n    // Use a binary search to find the closets cell.\n    if (offset <= totalMeasuredSize) {\n      return findNearestItemBinarySearch(\n        props,\n        instanceProps,\n        lastMeasuredIndex,\n        0,\n        offset\n      );\n    }\n\n    // Otherwise render a new batch of items starting from where we left off.\n    return lastMeasuredIndex + 1;\n  },\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, layout, height, itemCount, width } = props;\n\n    const size = (((direction === 'horizontal' || layout === 'horizontal'\n      ? width\n      : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): DynanmicProps);\n\n    const instanceProps = {\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      instance,\n      itemOffsetMap: {},\n      itemSizeMap: {},\n      lastMeasuredIndex: -1,\n      lastPositionedIndex: -1,\n      totalMeasuredSize: 0,\n    };\n\n    let debounceForceUpdateID = null;\n    const debounceForceUpdate = () => {\n      if (debounceForceUpdateID === null) {\n        debounceForceUpdateID = setTimeout(() => {\n          debounceForceUpdateID = null;\n          instance.forceUpdate();\n        }, 1);\n      }\n    };\n\n    // This method is called before unmounting.\n    instance._unmountHook = () => {\n      if (debounceForceUpdateID !== null) {\n        clearTimeout(debounceForceUpdateID);\n        debounceForceUpdateID = null;\n      }\n    };\n\n    let hasNewMeasurements: boolean = false;\n    let sizeDeltaTotal = 0;\n\n    // This method is called after mount and update.\n    instance._commitHook = () => {\n      if (hasNewMeasurements) {\n        hasNewMeasurements = false;\n\n        // Edge case where cell sizes changed, but cancelled each other out.\n        // We still need to re-render in this case,\n        // Even though we don't need to adjust scroll offset.\n        if (sizeDeltaTotal === 0) {\n          instance.forceUpdate();\n          return;\n        }\n\n        let shouldForceUpdate;\n\n        // In the setState commit hook, we'll decrement sizeDeltaTotal.\n        // In case the state update is processed synchronously,\n        // And triggers additional size updates itself,\n        // We should only drecement by the amount we updated state for originally.\n        const sizeDeltaForStateUpdate = sizeDeltaTotal;\n\n        // If the user is scrolling up, we need to adjust the scroll offset,\n        // To prevent items from \"jumping\" as items before them have been resized.\n        instance.setState(\n          prevState => {\n            if (\n              prevState.scrollDirection === 'backward' &&\n              !prevState.scrollUpdateWasRequested\n            ) {\n              // TRICKY\n              // If item(s) have changed size since they were last displayed, content will appear to jump.\n              // To avoid this, we need to make small adjustments as a user scrolls to preserve apparent position.\n              // This also ensures that the first item eventually aligns with scroll offset 0.\n              return {\n                scrollOffset: prevState.scrollOffset + sizeDeltaForStateUpdate,\n              };\n            } else {\n              // There's no state to update,\n              // But we still want to re-render in this case.\n              shouldForceUpdate = true;\n\n              return null;\n            }\n          },\n          () => {\n            if (shouldForceUpdate) {\n              instance.forceUpdate();\n            } else {\n              const { scrollOffset } = instance.state;\n              const { direction, layout } = instance.props;\n\n              // Adjusting scroll offset directly interrupts smooth scrolling for some browsers (e.g. Firefox).\n              // The relative scrollBy() method doesn't interrupt (or at least it won't as of Firefox v65).\n              // Other browsers (e.g. Chrome, Safari) seem to handle both adjustments equally well.\n              // See https://bugzilla.mozilla.org/show_bug.cgi?id=1502059\n              const element = ((instance._outerRef: any): HTMLDivElement);\n              // $FlowFixMe Property scrollBy is missing in HTMLDivElement\n              if (typeof element.scrollBy === 'function') {\n                element.scrollBy(\n                  direction === 'horizontal' || layout === 'horizontal'\n                    ? sizeDeltaForStateUpdate\n                    : 0,\n                  direction === 'horizontal' || layout === 'horizontal'\n                    ? 0\n                    : sizeDeltaForStateUpdate\n                );\n              } else if (\n                direction === 'horizontal' ||\n                layout === 'horizontal'\n              ) {\n                element.scrollLeft = scrollOffset;\n              } else {\n                element.scrollTop = scrollOffset;\n              }\n            }\n\n            sizeDeltaTotal -= sizeDeltaForStateUpdate;\n          }\n        );\n      }\n    };\n\n    // This function may be called out of order!\n    // It is not safe to reposition items here.\n    // Be careful when comparing index and lastMeasuredIndex.\n    const handleNewMeasurements: HandleNewMeasurements = (\n      index: number,\n      newSize: number,\n      isFirstMeasureAfterMounting: boolean\n    ) => {\n      const {\n        itemSizeMap,\n        lastMeasuredIndex,\n        lastPositionedIndex,\n      } = instanceProps;\n\n      // In some browsers (e.g. Firefox) fast scrolling may skip rows.\n      // In this case, our assumptions about last measured indices may be incorrect.\n      // Handle this edge case to prevent NaN values from breaking styles.\n      // Slow scrolling back over these skipped rows will adjust their sizes.\n      const oldSize = itemSizeMap[index] || 0;\n\n      // Mark offsets after this as stale so that getItemMetadata() will lazily recalculate it.\n      if (index < lastPositionedIndex) {\n        instanceProps.lastPositionedIndex = index;\n      }\n\n      if (index <= lastMeasuredIndex) {\n        if (oldSize === newSize) {\n          return;\n        }\n\n        // Adjust total size estimate by the delta in size.\n        instanceProps.totalMeasuredSize += newSize - oldSize;\n\n        // Record the size delta here in case the user is scrolling up.\n        // In that event, we need to adjust the scroll offset by thie amount,\n        // To prevent items from \"jumping\" as items before them are resized.\n        // We only do this for items that are newly measured (after mounting).\n        // Ones that change size later do not need to affect scroll offset.\n        if (isFirstMeasureAfterMounting) {\n          sizeDeltaTotal += newSize - oldSize;\n        }\n      } else {\n        instanceProps.lastMeasuredIndex = index;\n        instanceProps.totalMeasuredSize += newSize;\n      }\n\n      itemSizeMap[index] = newSize;\n\n      // Even though the size has changed, we don't need to reset the cached style,\n      // Because dynamic list items don't have constrained sizes.\n      // This enables them to resize when their content (or container size) changes.\n      // It also lets us avoid an unnecessary render in this case.\n\n      if (isFirstMeasureAfterMounting) {\n        hasNewMeasurements = true;\n      } else {\n        debounceForceUpdate();\n      }\n    };\n    instance._handleNewMeasurements = handleNewMeasurements;\n\n    // Override the item-rendering process to wrap items with ItemMeasurer.\n    // This keep the external API simpler.\n    instance._renderItems = () => {\n      const {\n        children,\n        direction,\n        layout,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        useIsScrolling,\n      } = instance.props;\n      const { isScrolling } = instance.state;\n\n      const [startIndex, stopIndex] = instance._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          const { size } = getItemMetadata(\n            instance.props,\n            index,\n            instanceProps\n          );\n\n          // It's important to read style after fetching item metadata.\n          // getItemMetadata() will clear stale styles.\n          const style = instance._getItemStyle(index);\n\n          const item = createElement(children, {\n            data: itemData,\n            index,\n            isScrolling: useIsScrolling ? isScrolling : undefined,\n            style,\n          });\n\n          // Always wrap children in a ItemMeasurer to detect changes in size.\n          items.push(\n            createElement(ItemMeasurer, {\n              direction,\n              layout,\n              handleNewMeasurements,\n              index,\n              item,\n              key: itemKey(index, itemData),\n              size,\n            })\n          );\n        }\n      }\n      return items;\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (itemSize !== undefined) {\n        throw Error('An unexpected \"itemSize\" prop has been provided.');\n      }\n    }\n  },\n});\n\nexport default DynamicSizeList;\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          [direction === 'rtl' ? 'right' : 'left']: getColumnOffset(\n            this.props,\n            columnIndex,\n            this._instanceProps\n          ),\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          // eslint-disable-next-line default-case\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst FixedSizeGrid = createGridComponent({\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\n    index * ((columnWidth: any): number),\n\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\n    ((columnWidth: any): number),\n\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\n    index * ((rowHeight: any): number),\n\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\n    ((rowHeight: any): number),\n\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\n    ((rowHeight: any): number) * rowCount,\n\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\n    ((columnWidth: any): number) * columnCount,\n\n  getOffsetForColumnAndAlignment: (\n    { columnCount, columnWidth, width }: Props<any>,\n    columnIndex: number,\n    align: ScrollToAlign,\n    scrollLeft: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastColumnOffset = Math.max(\n      0,\n      columnCount * ((columnWidth: any): number) - width\n    );\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * ((columnWidth: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      columnIndex * ((columnWidth: any): number) -\n        width +\n        scrollbarSize +\n        ((columnWidth: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getOffsetForRowAndAlignment: (\n    { rowHeight, height, rowCount }: Props<any>,\n    rowIndex: number,\n    align: ScrollToAlign,\n    scrollTop: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastRowOffset = Math.max(\n      0,\n      rowCount * ((rowHeight: any): number) - height\n    );\n    const maxOffset = Math.min(\n      lastRowOffset,\n      rowIndex * ((rowHeight: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      rowIndex * ((rowHeight: any): number) -\n        height +\n        scrollbarSize +\n        ((rowHeight: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: (\n    { columnWidth, columnCount }: Props<any>,\n    scrollLeft: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        Math.floor(scrollLeft / ((columnWidth: any): number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, columnCount, width }: Props<any>,\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * ((columnWidth: any): number);\n    const numVisibleColumns = Math.ceil(\n      (width + scrollLeft - left) / ((columnWidth: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, rowCount }: Props<any>,\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, rowCount, height }: Props<any>,\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * ((rowHeight: any): number);\n    const numVisibleRows = Math.ceil(\n      (height + scrollTop - top) / ((rowHeight: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        rowCount - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeGrid;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) - size + ((itemSize: any): number)\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\ntype ItemType = 'column' | 'row';\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\ntype InstanceProps = {|\n  columnMetadataMap: ItemMetadataMap,\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  lastMeasuredColumnIndex: number,\n  lastMeasuredRowIndex: number,\n  rowMetadataMap: ItemMetadataMap,\n|};\n\nconst getEstimatedTotalHeight = (\n  { rowCount }: Props<any>,\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getEstimatedTotalWidth = (\n  { columnCount }: Props<any>,\n  {\n    columnMetadataMap,\n    estimatedColumnWidth,\n    lastMeasuredColumnIndex,\n  }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getItemMetadata = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = itemSize(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  let itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      itemType,\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      itemType,\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(\n      itemType,\n      props,\n      middle,\n      instanceProps\n    ).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    itemType,\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getOffsetForIndexAndAlignment = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: InstanceProps,\n  scrollbarSize: number\n): number => {\n  const size = itemType === 'column' ? props.width : props.height;\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\n\n  // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n  const estimatedTotalSize =\n    itemType === 'column'\n      ? getEstimatedTotalWidth(props, instanceProps)\n      : getEstimatedTotalHeight(props, instanceProps);\n\n  const maxOffset = Math.max(\n    0,\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\n  );\n  const minOffset = Math.max(\n    0,\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\n  );\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\n\nconst VariableSizeGrid = createGridComponent({\n  getColumnOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\n\n  getColumnStartIndexForOffset: (\n    props: Props<any>,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\n\n  getColumnStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { columnCount, width } = props;\n\n    const itemMetadata = getItemMetadata(\n      'column',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollLeft + width;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  getColumnWidth: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.columnMetadataMap[index].size,\n\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n\n  getOffsetForColumnAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'column',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getOffsetForRowAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'row',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getRowOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\n\n  getRowHeight: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.rowMetadataMap[index].size,\n\n  getRowStartIndexForOffset: (\n    props: Props<any>,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\n\n  getRowStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { rowCount, height } = props;\n\n    const itemMetadata = getItemMetadata(\n      'row',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollTop + height;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const {\n      estimatedColumnWidth,\n      estimatedRowHeight,\n    } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {},\n    };\n\n    instance.resetAfterColumnIndex = (\n      columnIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterRowIndex = (\n      rowIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterIndices = ({\n      columnIndex,\n      rowIndex,\n      shouldForceUpdate = true,\n    }: {\n      columnIndex?: number,\n      rowIndex?: number,\n      shouldForceUpdate: boolean,\n    }) => {\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(\n          instanceProps.lastMeasuredColumnIndex,\n          columnIndex - 1\n        );\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(\n          instanceProps.lastMeasuredRowIndex,\n          rowIndex - 1\n        );\n      }\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      } else if (typeof rowHeight !== 'function') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeGrid;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","// @flow\n\nimport areEqual from './areEqual';\nimport shallowDiffers from './shallowDiffers';\n\n// Custom shouldComponentUpdate for class components.\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nexport default function shouldComponentUpdate(\n  nextProps: Object,\n  nextState: Object\n): boolean {\n  return (\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\n  );\n}\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_assertThisInitialized","self","ReferenceError","_inheritsLoose","subClass","superClass","create","constructor","__proto__","areInputsEqual","newInputs","lastInputs","memoizeOne","resultFn","isEqual","lastThis","lastResult","lastArgs","calledOnce","newArgs","_i","now","performance","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","requestAnimationFrame","tick","size","cachedRTLResult","getRTLOffsetType","recalculate","outerDiv","document","createElement","outerStyle","style","width","height","overflow","direction","innerDiv","innerStyle","appendChild","body","scrollLeft","removeChild","IS_SCROLLING_DEBOUNCE_INTERVAL","defaultItemKey","index","data","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getOffsetForIndexAndAlignment","getStartIndexForOffset","getStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","props","_instanceProps","_this","_outerRef","_resetIsScrollingTimeoutId","state","instance","isScrolling","scrollDirection","scrollOffset","initialScrollOffset","scrollUpdateWasRequested","_callOnItemsRendered","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","itemSize","layout","itemStyleCache","_getItemStyleCache","offset","isHorizontal","position","top","_itemStyleCache","_","__","___","_onScrollHorizontal","event","currentTarget","clientWidth","scrollWidth","setState","prevState","Math","max","min","_resetIsScrollingDebounced","_onScrollVertical","clientHeight","scrollHeight","scrollTop","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","getDerivedStateFromProps","nextProps","validateSharedProps","scrollTo","scrollToItem","align","itemCount","componentDidMount","_callPropsCallbacks","_commitHook","componentDidUpdate","componentWillUnmount","_unmountHook","render","className","innerRef","innerElementType","innerTagName","outerElementType","outerTagName","items","_renderItems","estimatedTotalSize","WebkitOverflowScrolling","willChange","children","pointerEvents","undefined","_getRangeToRender","overscanCount","startIndex","stopIndex","overscanBackward","overscanForward","itemData","itemKey","useIsScrolling","push","PureComponent","defaultProps","ItemMeasurer","_didProvideValidRef","_node","_resizeObserver","_measureItem","isCommitPhase","isMount","handleNewMeasurements","oldSize","node","ownerDocument","defaultView","HTMLElement","newSize","ceil","offsetWidth","offsetHeight","_refSetter","unobserve","findDOMNode","observe","_onResize","ResizeObserver","disconnect","cloneElement","item","Component","getItemMetadata","instanceProps","estimatedItemSize","itemOffsetMap","itemSizeMap","lastMeasuredIndex","lastPositionedIndex","prevOffset","prevSize","newEstimatedTotalSize","totalMeasuredSize","DynamicSizeList","itemMetadata","maxOffset","minOffset","round","high","low","middle","floor","currentOffset","findNearestItemBinarySearch","debounceForceUpdateID","clearTimeout","hasNewMeasurements","sizeDeltaTotal","forceUpdate","shouldForceUpdate","sizeDeltaForStateUpdate","element","scrollBy","isFirstMeasureAfterMounting","setTimeout","_handleNewMeasurements","columnIndex","rowIndex","createGridComponent","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","horizontalScrollDirection","initialScrollLeft","initialScrollTop","verticalScrollDirection","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","columnWidth","rowHeight","_onScroll","calculatedScrollLeft","calculatedScrollTop","columnCount","rowCount","scrollbarSize","div","getScrollbarSize","estimatedTotalHeight","horizontalScrollbarSize","verticalScrollbarSize","_getHorizontalRangeToRender","columnStartIndex","columnStopIndex","_getVerticalRangeToRender","rowStartIndex","rowStopIndex","estimatedTotalWidth","overscanColumnCount","overscanColumnsCount","overscanCountResolved","overscanRowCount","overscanRowsCount","FixedSizeGrid","lastColumnOffset","middleOffset","lastRowOffset","left","numVisibleColumns","numVisibleRows","FixedSizeList","lastItemOffset","numVisibleItems","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","itemType","itemMetadataMap","findNearestItem","findNearestItemExponentialSearch","interval","VariableSizeGrid","resetAfterColumnIndex","resetAfterIndices","resetAfterRowIndex","totalSizeOfMeasuredItems","VariableSizeList","resetAfterIndex","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","shallowDiffers","prev","next","attribute","areEqual","prevProps","prevStyle","prevRest","nextStyle","nextRest","nextState"],"mappings":"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"}